// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "gemino_types.h"
#include <RcppArmadillo.h>
#include <sitmo.h>
#include <Rcpp.h>

using namespace Rcpp;

// see_mutations
List see_mutations(SEXP vs_, const uint& var_ind);
RcppExport SEXP _gemino_see_mutations(SEXP vs_SEXP, SEXP var_indSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type vs_(vs_SEXP);
    Rcpp::traits::input_parameter< const uint& >::type var_ind(var_indSEXP);
    rcpp_result_gen = Rcpp::wrap(see_mutations(vs_, var_ind));
    return rcpp_result_gen;
END_RCPP
}
// add_substitution
void add_substitution(SEXP vs_, const uint& var_ind, const uint& seq_ind, const char& nucleo, const uint& new_pos_);
RcppExport SEXP _gemino_add_substitution(SEXP vs_SEXP, SEXP var_indSEXP, SEXP seq_indSEXP, SEXP nucleoSEXP, SEXP new_pos_SEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type vs_(vs_SEXP);
    Rcpp::traits::input_parameter< const uint& >::type var_ind(var_indSEXP);
    Rcpp::traits::input_parameter< const uint& >::type seq_ind(seq_indSEXP);
    Rcpp::traits::input_parameter< const char& >::type nucleo(nucleoSEXP);
    Rcpp::traits::input_parameter< const uint& >::type new_pos_(new_pos_SEXP);
    add_substitution(vs_, var_ind, seq_ind, nucleo, new_pos_);
    return R_NilValue;
END_RCPP
}
// add_insertion
void add_insertion(SEXP vs_, const uint& var_ind, const uint& seq_ind, const std::string& nucleos_, const uint& new_pos_);
RcppExport SEXP _gemino_add_insertion(SEXP vs_SEXP, SEXP var_indSEXP, SEXP seq_indSEXP, SEXP nucleos_SEXP, SEXP new_pos_SEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type vs_(vs_SEXP);
    Rcpp::traits::input_parameter< const uint& >::type var_ind(var_indSEXP);
    Rcpp::traits::input_parameter< const uint& >::type seq_ind(seq_indSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type nucleos_(nucleos_SEXP);
    Rcpp::traits::input_parameter< const uint& >::type new_pos_(new_pos_SEXP);
    add_insertion(vs_, var_ind, seq_ind, nucleos_, new_pos_);
    return R_NilValue;
END_RCPP
}
// add_deletion
void add_deletion(SEXP vs_, const uint& var_ind, const uint& seq_ind, const uint& size_, const uint& new_pos_);
RcppExport SEXP _gemino_add_deletion(SEXP vs_SEXP, SEXP var_indSEXP, SEXP seq_indSEXP, SEXP size_SEXP, SEXP new_pos_SEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type vs_(vs_SEXP);
    Rcpp::traits::input_parameter< const uint& >::type var_ind(var_indSEXP);
    Rcpp::traits::input_parameter< const uint& >::type seq_ind(seq_indSEXP);
    Rcpp::traits::input_parameter< const uint& >::type size_(size_SEXP);
    Rcpp::traits::input_parameter< const uint& >::type new_pos_(new_pos_SEXP);
    add_deletion(vs_, var_ind, seq_ind, size_, new_pos_);
    return R_NilValue;
END_RCPP
}
// merge_sequences
void merge_sequences(SEXP ref_);
RcppExport SEXP _gemino_merge_sequences(SEXP ref_SEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ref_(ref_SEXP);
    merge_sequences(ref_);
    return R_NilValue;
END_RCPP
}
// filter_sequences
void filter_sequences(SEXP ref_, const uint& min_seq_size, const double& out_seq_prop);
RcppExport SEXP _gemino_filter_sequences(SEXP ref_SEXP, SEXP min_seq_sizeSEXP, SEXP out_seq_propSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ref_(ref_SEXP);
    Rcpp::traits::input_parameter< const uint& >::type min_seq_size(min_seq_sizeSEXP);
    Rcpp::traits::input_parameter< const double& >::type out_seq_prop(out_seq_propSEXP);
    filter_sequences(ref_, min_seq_size, out_seq_prop);
    return R_NilValue;
END_RCPP
}
// create_genome
SEXP create_genome(const uint& n_seqs, const double& len_mean, const double& len_sd, NumericVector equil_freqs, const uint& n_cores);
RcppExport SEXP _gemino_create_genome(SEXP n_seqsSEXP, SEXP len_meanSEXP, SEXP len_sdSEXP, SEXP equil_freqsSEXP, SEXP n_coresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const uint& >::type n_seqs(n_seqsSEXP);
    Rcpp::traits::input_parameter< const double& >::type len_mean(len_meanSEXP);
    Rcpp::traits::input_parameter< const double& >::type len_sd(len_sdSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type equil_freqs(equil_freqsSEXP);
    Rcpp::traits::input_parameter< const uint& >::type n_cores(n_coresSEXP);
    rcpp_result_gen = Rcpp::wrap(create_genome(n_seqs, len_mean, len_sd, equil_freqs, n_cores));
    return rcpp_result_gen;
END_RCPP
}
// rando_seqs
std::vector<std::string> rando_seqs(const uint& n_seqs, const double& len_mean, const double& len_sd, NumericVector equil_freqs, const uint& n_cores);
RcppExport SEXP _gemino_rando_seqs(SEXP n_seqsSEXP, SEXP len_meanSEXP, SEXP len_sdSEXP, SEXP equil_freqsSEXP, SEXP n_coresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const uint& >::type n_seqs(n_seqsSEXP);
    Rcpp::traits::input_parameter< const double& >::type len_mean(len_meanSEXP);
    Rcpp::traits::input_parameter< const double& >::type len_sd(len_sdSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type equil_freqs(equil_freqsSEXP);
    Rcpp::traits::input_parameter< const uint& >::type n_cores(n_coresSEXP);
    rcpp_result_gen = Rcpp::wrap(rando_seqs(n_seqs, len_mean, len_sd, equil_freqs, n_cores));
    return rcpp_result_gen;
END_RCPP
}
// digest_var
std::vector< std::vector< std::deque<uint> > > digest_var(SEXP var_, const std::vector<std::string>& bind_sites, const std::vector<uint>& len5s, const uint& chunk_size, const uint& n_cores);
RcppExport SEXP _gemino_digest_var(SEXP var_SEXP, SEXP bind_sitesSEXP, SEXP len5sSEXP, SEXP chunk_sizeSEXP, SEXP n_coresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type var_(var_SEXP);
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type bind_sites(bind_sitesSEXP);
    Rcpp::traits::input_parameter< const std::vector<uint>& >::type len5s(len5sSEXP);
    Rcpp::traits::input_parameter< const uint& >::type chunk_size(chunk_sizeSEXP);
    Rcpp::traits::input_parameter< const uint& >::type n_cores(n_coresSEXP);
    rcpp_result_gen = Rcpp::wrap(digest_var(var_, bind_sites, len5s, chunk_size, n_cores));
    return rcpp_result_gen;
END_RCPP
}
// digest_ref
std::vector< std::deque<uint> > digest_ref(SEXP ref_, const std::vector<std::string>& bind_sites, const std::vector<uint>& len5s, const uint& n_cores, const uint& chunk_size);
RcppExport SEXP _gemino_digest_ref(SEXP ref_SEXP, SEXP bind_sitesSEXP, SEXP len5sSEXP, SEXP n_coresSEXP, SEXP chunk_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ref_(ref_SEXP);
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type bind_sites(bind_sitesSEXP);
    Rcpp::traits::input_parameter< const std::vector<uint>& >::type len5s(len5sSEXP);
    Rcpp::traits::input_parameter< const uint& >::type n_cores(n_coresSEXP);
    Rcpp::traits::input_parameter< const uint& >::type chunk_size(chunk_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(digest_ref(ref_, bind_sites, len5s, n_cores, chunk_size));
    return rcpp_result_gen;
END_RCPP
}
// print_rg
void print_rg(SEXP rg_);
RcppExport SEXP _gemino_print_rg(SEXP rg_SEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type rg_(rg_SEXP);
    print_rg(rg_);
    return R_NilValue;
END_RCPP
}
// print_vs
void print_vs(SEXP vs_);
RcppExport SEXP _gemino_print_vs(SEXP vs_SEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type vs_(vs_SEXP);
    print_vs(vs_);
    return R_NilValue;
END_RCPP
}
// read_fasta_noind
SEXP read_fasta_noind(const std::string& fasta_file, const bool& cut_names, const bool& remove_soft_mask);
RcppExport SEXP _gemino_read_fasta_noind(SEXP fasta_fileSEXP, SEXP cut_namesSEXP, SEXP remove_soft_maskSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type fasta_file(fasta_fileSEXP);
    Rcpp::traits::input_parameter< const bool& >::type cut_names(cut_namesSEXP);
    Rcpp::traits::input_parameter< const bool& >::type remove_soft_mask(remove_soft_maskSEXP);
    rcpp_result_gen = Rcpp::wrap(read_fasta_noind(fasta_file, cut_names, remove_soft_mask));
    return rcpp_result_gen;
END_RCPP
}
// read_fasta_ind
SEXP read_fasta_ind(const std::string& fasta_file, const std::string& fai_file, const bool& remove_soft_mask);
RcppExport SEXP _gemino_read_fasta_ind(SEXP fasta_fileSEXP, SEXP fai_fileSEXP, SEXP remove_soft_maskSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type fasta_file(fasta_fileSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type fai_file(fai_fileSEXP);
    Rcpp::traits::input_parameter< const bool& >::type remove_soft_mask(remove_soft_maskSEXP);
    rcpp_result_gen = Rcpp::wrap(read_fasta_ind(fasta_file, fai_file, remove_soft_mask));
    return rcpp_result_gen;
END_RCPP
}
// write_fasta_fa
void write_fasta_fa(std::string file_name, SEXP ref_, const uint& text_width);
RcppExport SEXP _gemino_write_fasta_fa(SEXP file_nameSEXP, SEXP ref_SEXP, SEXP text_widthSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type file_name(file_nameSEXP);
    Rcpp::traits::input_parameter< SEXP >::type ref_(ref_SEXP);
    Rcpp::traits::input_parameter< const uint& >::type text_width(text_widthSEXP);
    write_fasta_fa(file_name, ref_, text_width);
    return R_NilValue;
END_RCPP
}
// write_fasta_gz
void write_fasta_gz(const std::string& file_name, SEXP ref_, const uint& text_width);
RcppExport SEXP _gemino_write_fasta_gz(SEXP file_nameSEXP, SEXP ref_SEXP, SEXP text_widthSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type file_name(file_nameSEXP);
    Rcpp::traits::input_parameter< SEXP >::type ref_(ref_SEXP);
    Rcpp::traits::input_parameter< const uint& >::type text_width(text_widthSEXP);
    write_fasta_gz(file_name, ref_, text_width);
    return R_NilValue;
END_RCPP
}
// make_ref
SEXP make_ref(std::deque<std::string> input);
RcppExport SEXP _gemino_make_ref(SEXP inputSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::deque<std::string> >::type input(inputSEXP);
    rcpp_result_gen = Rcpp::wrap(make_ref(input));
    return rcpp_result_gen;
END_RCPP
}
// see_ref
void see_ref(SEXP ref_);
RcppExport SEXP _gemino_see_ref(SEXP ref_SEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ref_(ref_SEXP);
    see_ref(ref_);
    return R_NilValue;
END_RCPP
}
// get_ref_seq
std::string get_ref_seq(SEXP ref_, const uint& s);
RcppExport SEXP _gemino_get_ref_seq(SEXP ref_SEXP, SEXP sSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ref_(ref_SEXP);
    Rcpp::traits::input_parameter< const uint& >::type s(sSEXP);
    rcpp_result_gen = Rcpp::wrap(get_ref_seq(ref_, s));
    return rcpp_result_gen;
END_RCPP
}
// get_ref_name
std::string get_ref_name(SEXP ref_, const uint& s);
RcppExport SEXP _gemino_get_ref_name(SEXP ref_SEXP, SEXP sSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ref_(ref_SEXP);
    Rcpp::traits::input_parameter< const uint& >::type s(sSEXP);
    rcpp_result_gen = Rcpp::wrap(get_ref_name(ref_, s));
    return rcpp_result_gen;
END_RCPP
}
// get_ref_seq_size
uint get_ref_seq_size(SEXP ref_, const uint& s);
RcppExport SEXP _gemino_get_ref_seq_size(SEXP ref_SEXP, SEXP sSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ref_(ref_SEXP);
    Rcpp::traits::input_parameter< const uint& >::type s(sSEXP);
    rcpp_result_gen = Rcpp::wrap(get_ref_seq_size(ref_, s));
    return rcpp_result_gen;
END_RCPP
}
// get_ref_n_scaff
uint get_ref_n_scaff(SEXP ref_);
RcppExport SEXP _gemino_get_ref_n_scaff(SEXP ref_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ref_(ref_SEXP);
    rcpp_result_gen = Rcpp::wrap(get_ref_n_scaff(ref_));
    return rcpp_result_gen;
END_RCPP
}
// make_vars
SEXP make_vars(const std::deque<std::string>& seqs, const uint& n_vars);
RcppExport SEXP _gemino_make_vars(SEXP seqsSEXP, SEXP n_varsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::deque<std::string>& >::type seqs(seqsSEXP);
    Rcpp::traits::input_parameter< const uint& >::type n_vars(n_varsSEXP);
    rcpp_result_gen = Rcpp::wrap(make_vars(seqs, n_vars));
    return rcpp_result_gen;
END_RCPP
}
// see_vg
std::vector<std::string> see_vg(SEXP vs_, const uint& v);
RcppExport SEXP _gemino_see_vg(SEXP vs_SEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type vs_(vs_SEXP);
    Rcpp::traits::input_parameter< const uint& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(see_vg(vs_, v));
    return rcpp_result_gen;
END_RCPP
}
// see_sizes
std::vector<uint> see_sizes(SEXP vs_, const uint& v);
RcppExport SEXP _gemino_see_sizes(SEXP vs_SEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type vs_(vs_SEXP);
    Rcpp::traits::input_parameter< const uint& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(see_sizes(vs_, v));
    return rcpp_result_gen;
END_RCPP
}
// see_start
std::string see_start(SEXP vs_, const uint& v, const uint& scaff, const uint& size_);
RcppExport SEXP _gemino_see_start(SEXP vs_SEXP, SEXP vSEXP, SEXP scaffSEXP, SEXP size_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type vs_(vs_SEXP);
    Rcpp::traits::input_parameter< const uint& >::type v(vSEXP);
    Rcpp::traits::input_parameter< const uint& >::type scaff(scaffSEXP);
    Rcpp::traits::input_parameter< const uint& >::type size_(size_SEXP);
    rcpp_result_gen = Rcpp::wrap(see_start(vs_, v, scaff, size_));
    return rcpp_result_gen;
END_RCPP
}
// see_chunk
std::string see_chunk(SEXP vs_, const uint& v, const uint& scaff, const uint& start, const uint& chunk_size);
RcppExport SEXP _gemino_see_chunk(SEXP vs_SEXP, SEXP vSEXP, SEXP scaffSEXP, SEXP startSEXP, SEXP chunk_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type vs_(vs_SEXP);
    Rcpp::traits::input_parameter< const uint& >::type v(vSEXP);
    Rcpp::traits::input_parameter< const uint& >::type scaff(scaffSEXP);
    Rcpp::traits::input_parameter< const uint& >::type start(startSEXP);
    Rcpp::traits::input_parameter< const uint& >::type chunk_size(chunk_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(see_chunk(vs_, v, scaff, start, chunk_size));
    return rcpp_result_gen;
END_RCPP
}
// cpp_merge_str
std::string cpp_merge_str(const std::vector<std::string>& in_strings);
RcppExport SEXP _gemino_cpp_merge_str(SEXP in_stringsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type in_strings(in_stringsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_merge_str(in_strings));
    return rcpp_result_gen;
END_RCPP
}
// cpp_str_split_delim
std::vector<std::string> cpp_str_split_delim(const std::string& in_string, const char& split);
RcppExport SEXP _gemino_cpp_str_split_delim(SEXP in_stringSEXP, SEXP splitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type in_string(in_stringSEXP);
    Rcpp::traits::input_parameter< const char& >::type split(splitSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_str_split_delim(in_string, split));
    return rcpp_result_gen;
END_RCPP
}
// optim_prob
double optim_prob(NumericVector v, NumericVector mean_pws_, NumericVector dens_, double seg_div_);
RcppExport SEXP _gemino_optim_prob(SEXP vSEXP, SEXP mean_pws_SEXP, SEXP dens_SEXP, SEXP seg_div_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type v(vSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mean_pws_(mean_pws_SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type dens_(dens_SEXP);
    Rcpp::traits::input_parameter< double >::type seg_div_(seg_div_SEXP);
    rcpp_result_gen = Rcpp::wrap(optim_prob(v, mean_pws_, dens_, seg_div_));
    return rcpp_result_gen;
END_RCPP
}
// sample_scaffs
std::vector<uint> sample_scaffs(const uint& total_mutations, const std::vector<double>& scaff_lens_cumsum, const std::vector<uint>& seeds);
RcppExport SEXP _gemino_sample_scaffs(SEXP total_mutationsSEXP, SEXP scaff_lens_cumsumSEXP, SEXP seedsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const uint& >::type total_mutations(total_mutationsSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type scaff_lens_cumsum(scaff_lens_cumsumSEXP);
    Rcpp::traits::input_parameter< const std::vector<uint>& >::type seeds(seedsSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_scaffs(total_mutations, scaff_lens_cumsum, seeds));
    return rcpp_result_gen;
END_RCPP
}
// cpp_nt_freq
List cpp_nt_freq(int N);
RcppExport SEXP _gemino_cpp_nt_freq(SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_nt_freq(N));
    return rcpp_result_gen;
END_RCPP
}
// make_variant_set
XPtr<VariantSet> make_variant_set(const std::vector<uint>& n_mutations, const XPtr<SequenceSet>& reference, const arma::umat& snp_combo_mat, const std::vector<double>& snp_probs_cumsum, std::vector<uint> seeds, double snp_p, double insertion_p, double n2N, double alpha);
RcppExport SEXP _gemino_make_variant_set(SEXP n_mutationsSEXP, SEXP referenceSEXP, SEXP snp_combo_matSEXP, SEXP snp_probs_cumsumSEXP, SEXP seedsSEXP, SEXP snp_pSEXP, SEXP insertion_pSEXP, SEXP n2NSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<uint>& >::type n_mutations(n_mutationsSEXP);
    Rcpp::traits::input_parameter< const XPtr<SequenceSet>& >::type reference(referenceSEXP);
    Rcpp::traits::input_parameter< const arma::umat& >::type snp_combo_mat(snp_combo_matSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type snp_probs_cumsum(snp_probs_cumsumSEXP);
    Rcpp::traits::input_parameter< std::vector<uint> >::type seeds(seedsSEXP);
    Rcpp::traits::input_parameter< double >::type snp_p(snp_pSEXP);
    Rcpp::traits::input_parameter< double >::type insertion_p(insertion_pSEXP);
    Rcpp::traits::input_parameter< double >::type n2N(n2NSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(make_variant_set(n_mutations, reference, snp_combo_mat, snp_probs_cumsum, seeds, snp_p, insertion_p, n2N, alpha));
    return rcpp_result_gen;
END_RCPP
}
// test_vitter_d
arma::Mat<uint> test_vitter_d(const uint reps, uint n, uint N, const std::vector<uint> seeds, const double n2N, const double alpha);
RcppExport SEXP _gemino_test_vitter_d(SEXP repsSEXP, SEXP nSEXP, SEXP NSEXP, SEXP seedsSEXP, SEXP n2NSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const uint >::type reps(repsSEXP);
    Rcpp::traits::input_parameter< uint >::type n(nSEXP);
    Rcpp::traits::input_parameter< uint >::type N(NSEXP);
    Rcpp::traits::input_parameter< const std::vector<uint> >::type seeds(seedsSEXP);
    Rcpp::traits::input_parameter< const double >::type n2N(n2NSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(test_vitter_d(reps, n, N, seeds, n2N, alpha));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_gemino_see_mutations", (DL_FUNC) &_gemino_see_mutations, 2},
    {"_gemino_add_substitution", (DL_FUNC) &_gemino_add_substitution, 5},
    {"_gemino_add_insertion", (DL_FUNC) &_gemino_add_insertion, 5},
    {"_gemino_add_deletion", (DL_FUNC) &_gemino_add_deletion, 5},
    {"_gemino_merge_sequences", (DL_FUNC) &_gemino_merge_sequences, 1},
    {"_gemino_filter_sequences", (DL_FUNC) &_gemino_filter_sequences, 3},
    {"_gemino_create_genome", (DL_FUNC) &_gemino_create_genome, 5},
    {"_gemino_rando_seqs", (DL_FUNC) &_gemino_rando_seqs, 5},
    {"_gemino_digest_var", (DL_FUNC) &_gemino_digest_var, 5},
    {"_gemino_digest_ref", (DL_FUNC) &_gemino_digest_ref, 5},
    {"_gemino_print_rg", (DL_FUNC) &_gemino_print_rg, 1},
    {"_gemino_print_vs", (DL_FUNC) &_gemino_print_vs, 1},
    {"_gemino_read_fasta_noind", (DL_FUNC) &_gemino_read_fasta_noind, 3},
    {"_gemino_read_fasta_ind", (DL_FUNC) &_gemino_read_fasta_ind, 3},
    {"_gemino_write_fasta_fa", (DL_FUNC) &_gemino_write_fasta_fa, 3},
    {"_gemino_write_fasta_gz", (DL_FUNC) &_gemino_write_fasta_gz, 3},
    {"_gemino_make_ref", (DL_FUNC) &_gemino_make_ref, 1},
    {"_gemino_see_ref", (DL_FUNC) &_gemino_see_ref, 1},
    {"_gemino_get_ref_seq", (DL_FUNC) &_gemino_get_ref_seq, 2},
    {"_gemino_get_ref_name", (DL_FUNC) &_gemino_get_ref_name, 2},
    {"_gemino_get_ref_seq_size", (DL_FUNC) &_gemino_get_ref_seq_size, 2},
    {"_gemino_get_ref_n_scaff", (DL_FUNC) &_gemino_get_ref_n_scaff, 1},
    {"_gemino_make_vars", (DL_FUNC) &_gemino_make_vars, 2},
    {"_gemino_see_vg", (DL_FUNC) &_gemino_see_vg, 2},
    {"_gemino_see_sizes", (DL_FUNC) &_gemino_see_sizes, 2},
    {"_gemino_see_start", (DL_FUNC) &_gemino_see_start, 4},
    {"_gemino_see_chunk", (DL_FUNC) &_gemino_see_chunk, 5},
    {"_gemino_cpp_merge_str", (DL_FUNC) &_gemino_cpp_merge_str, 1},
    {"_gemino_cpp_str_split_delim", (DL_FUNC) &_gemino_cpp_str_split_delim, 2},
    {"_gemino_optim_prob", (DL_FUNC) &_gemino_optim_prob, 4},
    {"_gemino_sample_scaffs", (DL_FUNC) &_gemino_sample_scaffs, 3},
    {"_gemino_cpp_nt_freq", (DL_FUNC) &_gemino_cpp_nt_freq, 1},
    {"_gemino_make_variant_set", (DL_FUNC) &_gemino_make_variant_set, 9},
    {"_gemino_test_vitter_d", (DL_FUNC) &_gemino_test_vitter_d, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_gemino(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
