% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/digest.R
\name{digest}
\alias{digest}
\title{Digest genome(s).}
\usage{
digest(object, enzyme_names, n_cores = 1, chunk_size = 1000,
  enz_list = binding_sites, in_place = FALSE)
}
\arguments{
\item{object}{Either a \code{dna_set} or \code{variants} object.}

\item{enzyme_names}{Name of enzyme(s).}

\item{n_cores}{Number of cores to use for parallel processing. This argument is
ignored if OpenMP is not enabled. Defaults to \code{1}.}

\item{chunk_size}{The size of chunks to break up scaffolds into when digesting
a \code{variants} object.
(This argument is ignored if digesting a \code{dna_set}.)
Changing this might affect performance, for better or worse.
The default worked best on my computer. Defaults to \code{1000}.}

\item{enz_list}{List of enzymes with binding sites. Default is the internal
\code{binding_sites} list (see \code{\link{binding_sites}}).}

\item{in_place}{Boolean for whether to edit the object in place without
making a new copy. Defaults to \code{FALSE}.}
}
\value{
If \code{in_place == FALSE}, a \code{variants} or \code{dna_set} object
with the \code{digests} field filled in.
If \code{in_place == TRUE}, it returns \code{NULL}, but it changes the input
object in place.
}
\description{
\emph{Note:} This will override any digestions currently in place in the
object. If you want to add a new digestion, re-run this function with the names
of all enzymes you're interested in included in the \code{enzyme_names} argument.
}
\examples{

\dontrun{

ref_genome <- dna_set$new(gemino:::rando_seqs(100, mean_len = 1e3, sd_len = 1e2))
digest(ref_genome, 'ApeKI', n_cores = 1, in_place = TRUE)
ref_genome

variants_obj <- make_variants(ref_genome, n_vars = 10)
variants_obj

# Returns a new variants object
digest(variants_obj, 'ApeKI')

# Returns nothing, but changes variants_obj object
digest(variants_obj, 'AscI', in_place = TRUE)
# To see the changes...
variants_obj

}

}
